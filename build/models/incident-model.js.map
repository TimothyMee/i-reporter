{"version":3,"sources":["../../server/models/incident-model.js"],"names":["incidentModel","getAll","type","result","helper","readJSONFile","Promise","resolve","reject","length","status","error","data","createNew","incident","incidentData","createdOn","newDate","id","getNewID","Joi","validate","schema","incidentSchema","details","message","then","res","resData","push","value","writeJSONFile","catch","get","find","i","err","editLocation","newLocation","location","editComment","newComment","comment","deleteIncident","newData","filter"],"mappings":"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","sourcesContent":["import Joi from 'joi';\nimport helper from '../helpers/helper';\nimport schema from '../helpers/schema';\n\nconst incidentModel = {\n\n  getAll(type) {\n    const result = helper.readJSONFile(`./server/db/${type}.json`);\n    return new Promise((resolve, reject) => {\n      if (result.length === 0) {\n        reject({\n          status: 404,\n          error: `No ${type} has been created yet`,\n        });\n      } else if (result === 'no such file') {\n        reject({\n          status: 404,\n          error: 'No such file found',\n        });\n      }\n      resolve({\n        status: 200,\n        data: result,\n      });\n    });\n  },\n\n  createNew(incident, type) {\n    return new Promise((resolve, reject) => {\n      const incidentData = incident;\n      incidentData.createdOn = helper.newDate();\n      incidentData.id = helper.getNewID(`./server/db/${type}.json`);\n\n      const result = Joi.validate(incidentData, schema.incidentSchema);\n      if (result.error) {\n        reject({\n          status: 400,\n          error: result.error.details[0].message,\n        });\n      } else {\n        this.getAll(type)\n          .then((res) => {\n            const resData = res.data;\n            resData.push(result.value);\n            helper.writeJSONFile(`./server/db/${type}.json`, resData);\n          })\n          .catch(() => {\n            helper.writeJSONFile(`./server/db/${type}.json`, [result.value]);\n          });\n\n        resolve({\n          status: 201,\n          data: {\n            id: result.value.id,\n            message: `Created ${type} record`,\n          },\n        });\n      }\n    });\n  },\n\n  get(id, type) {\n    return new Promise((resolve, reject) => {\n      this.getAll(type)\n        .then((res) => {\n          const resData = res.data;\n          const result = resData.find(i => i.id === id);\n          if (!result) {\n            reject({\n              status: 404,\n              error: `could not find record with id in ${type}s`,\n            });\n          }\n          resolve({\n            status: 200,\n            data: result,\n          });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  },\n\n  editLocation(id, newLocation, type) {\n    return new Promise((resolve, reject) => {\n      this.getAll(type)\n        .then((res) => {\n          const resData = res.data;\n          const result = resData.find(i => i.id === id);\n          if (!result) {\n            reject({\n              status: 404,\n              error: `could not find record with id in ${type}s`,\n            });\n          } else {\n            if (newLocation.location) {\n              result.location = newLocation.location;\n              helper.writeJSONFile(`./server/db/${type}.json`, resData);\n\n              resolve({\n                status: 200,\n                data: {\n                  id: result.id,\n                  message: `updated ${type} record's location`,\n                },\n              });\n            }\n\n            reject({\n              status: 400,\n              error: 'update data is wrong. check data',\n            });\n          }\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  },\n\n  editComment(id, newComment, type) {\n    return new Promise((resolve, reject) => {\n      this.getAll(type)\n        .then((res) => {\n          const resData = res.data;\n          const result = resData.find(i => i.id === id);\n          if (!result) {\n            reject({\n              status: 404,\n              error: `could not find record with id in ${type}s`,\n            });\n          } else {\n            if (newComment.comment) {\n              result.comment = newComment.comment;\n              helper.writeJSONFile(`./server/db/${type}.json`, resData);\n\n              resolve({\n                status: 200,\n                data: {\n                  id: result.id,\n                  message: `updated ${type} record's comment`,\n                },\n              });\n            }\n            reject({\n              status: 400,\n              error: 'update data is wrong. check data',\n            });\n          }\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  },\n\n  deleteIncident(id, type) {\n    return new Promise((resolve, reject) => {\n      this.getAll(type)\n        .then((res) => {\n          const resData = res.data;\n          const result = resData.find(i => i.id === id);\n          if (!result) {\n            reject({\n              status: 404,\n              error: `could not find record with id in ${type}s`,\n            });\n          } else {\n            // const index = res.indexOf(result);\n            // res.splice(index, 1);\n\n            const newData = resData.filter(incident => incident.id !== id);\n            helper.writeJSONFile(`./server/db/${type}.json`, newData);\n\n\n            resolve({\n              status: 200,\n              data: {\n                id: result.id,\n                message: `${type} record has been deleted`,\n              },\n            });\n          }\n        });\n    });\n  },\n};\n\nexport default incidentModel;\n"],"file":"incident-model.js"}